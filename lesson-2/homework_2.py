# 1). Создать список и заполнить его элементами различных типов данных. Реализовать скрипт
# определения типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы
# списка можно не запрашивать у пользователя, а указать явно, в программе. Попробуйте использовать
# не только базовые типы, но и вложенные словари, кортежи, списки.
# (Можно ограничиться вложенностью 1 уровня и не обходить содержимое этих вложенных коллекций.)

lst_1 = [1 ,2 , 3, 'слово', 'буква', [1, 2, 'friend'], None, 4]


for val in lst_1:
    print(type(val))
# 2). Для списка реализовать обмен значений соседних элементов, т.е. Значениями
# обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве
# элементов последний сохранить на своем месте. Исходные списки можете инициализировать
# прямо в коде, но обязательно проверьте работоспособность, для пустого
# списка, списка из 1 элемента, списка с четным количеством элементов и с нечетным.
# (Опционально) Если получится, реализуйте обмен, как функцию.

lst_2 = [1, 2, 3, 5, 6, 7, 8]
def change_element(array):
    element = 0
    for i in range(int(len(array)/2)):
        array[element], array[element +1] = array[element+1], array[element]
        element += 2
    return array

print(list(change_element([1.25, 2.25, 3.25, 5, 6, 7, 8, None])))

# 3). Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

#Решение через словарь
user_answer = int(input('вводите месяц в виде целого числа от 1 до 12: '))
dict_1 = {1: 'зима', 2: 'зима', 12: 'зима', 3: 'весна',
          4: 'весна', 5: 'весна', 6: 'лето', 7: 'лето',
          8: 'лето', 9: 'осень', 10: 'осень', 11: 'осень'}

print(dict_1.get(user_answer))
#Еще один вариант со словарём
month_number = int(input('вводите месяц в виде целого числа от 1 до 12: '))
season_dict = {1:'зима ',
               2:'весна ',
               3:'лето ',
               4:'осень '
               }
if month_number == 12 or month_number == 1 or month_number == 2:
    print(season_dict.get(1))
elif month_number == 3 or month_number == 4 or month_number == 5:
    print(season_dict.get(2))
elif month_number == 6 or month_number == 7 or month_number == 8:
    print(season_dict.get(3))
elif month_number == 9 or month_number == 10 or month_number == 11:
    print(season_dict.get(4))
else:
    print('такого месяца нет ')

#Решение через список
month = int(input('вводите месяц в виде целого числа от 1 до 12: '))
season_list= ['зима', 'весна', 'лето', 'осень']
if month == 12 or month == 1 or month == 2:
    print(season_list[0])
elif month == 3 or month == 4 or month == 5:
    print(season_list[1])
elif month == 6 or month == 7 or month == 8:
    print(season_list[2])
elif month == 9 or month == 10 or month == 11:
    print(season_list[3])
else:
    print('такого месяца нет')


# 4). Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если в слово длинное, выводить только первые 10 букв в слове.
# (Подсказка: не нумеруйте строки вручную, для этого есть встроенная функция,
# которой можно передать параметром первое число, с которого начинать пересчет.)

user_stroka = input('Введите строку из нескольких слов, разделённых пробелами:')
word = []
number = 1
for el in range(user_stroka.count(' ')+1):
    word = user_stroka.split()
    if len(str(word)) <= 10:
        print(f" {number} {word [el]}")
        number += 1
    else:
        print(f" {number} {word [el] [0:10]}")
        number += 1


# 5). Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с
# одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Исходный набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
my_list = [7, 5, 3, 3, 2]
number = int(input('Введите число:  '))

for el in range(len(my_list)):
    if my_list[el] == number:
        my_list.insert(el+1 , number)
        break
    elif my_list[0] < number:
        my_list.insert(0, number)
        break
    elif my_list[-1] > number:
        my_list.append(number)
        break
print(my_list)

# 6). * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер
# товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя (для быстроты
# попробуйте запрашивать все данные разом — "компьютер 20000 5 шт.").
# Для скорости можно не реализовывать проверку на корректность всех-всех данных, но обязательно используйте
# правильные типы, не сохраняйте все в строки.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }
# После ввода всех данных выведите такой словарь. (Для определения конца ввода можно использовать пустую строку.)


product = int(input("Введите количество товара "))
count = 1
my_dict = []
my_list = []
my_analys = {'название': [], 'цена': [], 'количество': [], 'ед': []}
while count <= product:
    my_dict = {'название': input("введите название "),
               'цена': int(input("Введите цену ")),
               'количество': int(input('Введите количество ')),
               'eд': str(input("Введите единицу измерения "))}
    my_list.append((count, my_dict))
    count += 1
    my_analys['название'].append(my_dict.get('название'))
    my_analys['цена'].append(my_dict.get('цена'))
    my_analys['количество'].append(my_dict.get('количество'))
    my_analys['ед'] = my_dict.get('eд')
print(my_list)
print(my_analys)




